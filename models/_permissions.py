# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Permissions(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Permissions - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'role': 'str',
            'resource': 'str',
            'operations_allow': 'list[str]',
            'operations_deny': 'list[str]',
            'horizontal_security_type': 'str',
            'fields_allow': 'list[str]',
            'fields_deny': 'list[str]',
            'id': 'str',
            'v': 'float',
            'id': 'str'
        }

        self.attribute_map = {
            'role': 'role',
            'resource': 'resource',
            'operations_allow': 'operations.allow',
            'operations_deny': 'operations.deny',
            'horizontal_security_type': 'horizontalSecurity.type',
            'fields_allow': 'fields.allow',
            'fields_deny': 'fields.deny',
            'id': '_id',
            'v': '__v',
            'id': 'id'
        }

        self._role = None
        self._resource = None
        self._operations_allow = None
        self._operations_deny = None
        self._horizontal_security_type = None
        self._fields_allow = None
        self._fields_deny = None
        self._id = None
        self._v = None
        self._id = None

    @property
    def role(self):
        """
        Gets the role of this Permissions.


        :return: The role of this Permissions.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """
        Sets the role of this Permissions.


        :param role: The role of this Permissions.
        :type: str
        """
        self._role = role

    @property
    def resource(self):
        """
        Gets the resource of this Permissions.


        :return: The resource of this Permissions.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """
        Sets the resource of this Permissions.


        :param resource: The resource of this Permissions.
        :type: str
        """
        self._resource = resource

    @property
    def operations_allow(self):
        """
        Gets the operations_allow of this Permissions.


        :return: The operations_allow of this Permissions.
        :rtype: list[str]
        """
        return self._operations_allow

    @operations_allow.setter
    def operations_allow(self, operations_allow):
        """
        Sets the operations_allow of this Permissions.


        :param operations_allow: The operations_allow of this Permissions.
        :type: list[str]
        """
        self._operations_allow = operations_allow

    @property
    def operations_deny(self):
        """
        Gets the operations_deny of this Permissions.


        :return: The operations_deny of this Permissions.
        :rtype: list[str]
        """
        return self._operations_deny

    @operations_deny.setter
    def operations_deny(self, operations_deny):
        """
        Sets the operations_deny of this Permissions.


        :param operations_deny: The operations_deny of this Permissions.
        :type: list[str]
        """
        self._operations_deny = operations_deny

    @property
    def horizontal_security_type(self):
        """
        Gets the horizontal_security_type of this Permissions.


        :return: The horizontal_security_type of this Permissions.
        :rtype: str
        """
        return self._horizontal_security_type

    @horizontal_security_type.setter
    def horizontal_security_type(self, horizontal_security_type):
        """
        Sets the horizontal_security_type of this Permissions.


        :param horizontal_security_type: The horizontal_security_type of this Permissions.
        :type: str
        """
        self._horizontal_security_type = horizontal_security_type

    @property
    def fields_allow(self):
        """
        Gets the fields_allow of this Permissions.


        :return: The fields_allow of this Permissions.
        :rtype: list[str]
        """
        return self._fields_allow

    @fields_allow.setter
    def fields_allow(self, fields_allow):
        """
        Sets the fields_allow of this Permissions.


        :param fields_allow: The fields_allow of this Permissions.
        :type: list[str]
        """
        self._fields_allow = fields_allow

    @property
    def fields_deny(self):
        """
        Gets the fields_deny of this Permissions.


        :return: The fields_deny of this Permissions.
        :rtype: list[str]
        """
        return self._fields_deny

    @fields_deny.setter
    def fields_deny(self, fields_deny):
        """
        Sets the fields_deny of this Permissions.


        :param fields_deny: The fields_deny of this Permissions.
        :type: list[str]
        """
        self._fields_deny = fields_deny

    @property
    def id(self):
        """
        Gets the id of this Permissions.


        :return: The id of this Permissions.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Permissions.


        :param id: The id of this Permissions.
        :type: str
        """
        self._id = id

    @property
    def v(self):
        """
        Gets the v of this Permissions.


        :return: The v of this Permissions.
        :rtype: float
        """
        return self._v

    @v.setter
    def v(self, v):
        """
        Sets the v of this Permissions.


        :param v: The v of this Permissions.
        :type: float
        """
        self._v = v

    @property
    def id(self):
        """
        Gets the id of this Permissions.


        :return: The id of this Permissions.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Permissions.


        :param id: The id of this Permissions.
        :type: str
        """
        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

