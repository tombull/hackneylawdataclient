# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class PotentialAnswer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PotentialAnswer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'owner_id': 'str',
            'created_at': 'datetime',
            'answer_text': 'str',
            'answer_advice': 'str',
            'question': 'GenericQuestion',
            'id': 'str',
            'v': 'float',
            'id': 'str',
            'related_link': 'list[str]',
            'required_document': 'list[str]'
        }

        self.attribute_map = {
            'owner_id': '_ownerId',
            'created_at': '_createdAt',
            'answer_text': 'answerText',
            'answer_advice': 'answerAdvice',
            'question': 'question',
            'id': '_id',
            'v': '__v',
            
            'related_link': 'relatedLink',
            'required_document': 'requiredDocument'
        }

        self._owner_id = None
        self._created_at = None
        self._answer_text = None
        self._answer_advice = None
        self._question = None
        self._id = None
        self._v = None
        self._id = None
        self._related_link = None
        self._required_document = None

    @property
    def owner_id(self):
        """
        Gets the owner_id of this PotentialAnswer.


        :return: The owner_id of this PotentialAnswer.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """
        Sets the owner_id of this PotentialAnswer.


        :param owner_id: The owner_id of this PotentialAnswer.
        :type: str
        """
        self._owner_id = owner_id

    @property
    def created_at(self):
        """
        Gets the created_at of this PotentialAnswer.


        :return: The created_at of this PotentialAnswer.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this PotentialAnswer.


        :param created_at: The created_at of this PotentialAnswer.
        :type: datetime
        """
        self._created_at = created_at

    @property
    def answer_text(self):
        """
        Gets the answer_text of this PotentialAnswer.


        :return: The answer_text of this PotentialAnswer.
        :rtype: str
        """
        return self._answer_text

    @answer_text.setter
    def answer_text(self, answer_text):
        """
        Sets the answer_text of this PotentialAnswer.


        :param answer_text: The answer_text of this PotentialAnswer.
        :type: str
        """
        self._answer_text = answer_text

    @property
    def answer_advice(self):
        """
        Gets the answer_advice of this PotentialAnswer.


        :return: The answer_advice of this PotentialAnswer.
        :rtype: str
        """
        return self._answer_advice

    @answer_advice.setter
    def answer_advice(self, answer_advice):
        """
        Sets the answer_advice of this PotentialAnswer.


        :param answer_advice: The answer_advice of this PotentialAnswer.
        :type: str
        """
        self._answer_advice = answer_advice

    @property
    def question(self):
        """
        Gets the question of this PotentialAnswer.


        :return: The question of this PotentialAnswer.
        :rtype: GenericQuestion
        """
        return self._question

    @question.setter
    def question(self, question):
        """
        Sets the question of this PotentialAnswer.


        :param question: The question of this PotentialAnswer.
        :type: GenericQuestion
        """
        self._question = question

    @property
    def id(self):
        """
        Gets the id of this PotentialAnswer.


        :return: The id of this PotentialAnswer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PotentialAnswer.


        :param id: The id of this PotentialAnswer.
        :type: str
        """
        self._id = id

    @property
    def v(self):
        """
        Gets the v of this PotentialAnswer.


        :return: The v of this PotentialAnswer.
        :rtype: float
        """
        return self._v

    @v.setter
    def v(self, v):
        """
        Sets the v of this PotentialAnswer.


        :param v: The v of this PotentialAnswer.
        :type: float
        """
        self._v = v

    @property
    def id(self):
        """
        Gets the id of this PotentialAnswer.


        :return: The id of this PotentialAnswer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PotentialAnswer.


        :param id: The id of this PotentialAnswer.
        :type: str
        """
        self._id = id

    @property
    def related_link(self):
        """
        Gets the related_link of this PotentialAnswer.


        :return: The related_link of this PotentialAnswer.
        :rtype: list[str]
        """
        return self._related_link

    @related_link.setter
    def related_link(self, related_link):
        """
        Sets the related_link of this PotentialAnswer.


        :param related_link: The related_link of this PotentialAnswer.
        :type: list[str]
        """
        self._related_link = related_link

    @property
    def required_document(self):
        """
        Gets the required_document of this PotentialAnswer.


        :return: The required_document of this PotentialAnswer.
        :rtype: list[str]
        """
        return self._required_document

    @required_document.setter
    def required_document(self, required_document):
        """
        Sets the required_document of this PotentialAnswer.


        :param required_document: The required_document of this PotentialAnswer.
        :type: list[str]
        """
        self._required_document = required_document

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

