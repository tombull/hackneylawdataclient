# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Providers(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Providers - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'enable': 'bool',
            'auto_enroll': 'bool',
            'default_role': 'str',
            'order': 'float',
            'id': 'str',
            'v': 'float',
            'id': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'enable': 'enable',
            'auto_enroll': 'autoEnroll',
            'default_role': 'defaultRole',
            'order': 'order',
            'id': '_id',
            'v': '__v'
        }

        self._name = None
        self._enable = None
        self._auto_enroll = None
        self._default_role = None
        self._order = None
        self._id = None
        self._v = None
        self._id = None

    @property
    def name(self):
        """
        Gets the name of this Providers.


        :return: The name of this Providers.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Providers.


        :param name: The name of this Providers.
        :type: str
        """
        self._name = name

    @property
    def enable(self):
        """
        Gets the enable of this Providers.


        :return: The enable of this Providers.
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """
        Sets the enable of this Providers.


        :param enable: The enable of this Providers.
        :type: bool
        """
        self._enable = enable

    @property
    def auto_enroll(self):
        """
        Gets the auto_enroll of this Providers.


        :return: The auto_enroll of this Providers.
        :rtype: bool
        """
        return self._auto_enroll

    @auto_enroll.setter
    def auto_enroll(self, auto_enroll):
        """
        Sets the auto_enroll of this Providers.


        :param auto_enroll: The auto_enroll of this Providers.
        :type: bool
        """
        self._auto_enroll = auto_enroll

    @property
    def default_role(self):
        """
        Gets the default_role of this Providers.


        :return: The default_role of this Providers.
        :rtype: str
        """
        return self._default_role

    @default_role.setter
    def default_role(self, default_role):
        """
        Sets the default_role of this Providers.


        :param default_role: The default_role of this Providers.
        :type: str
        """
        self._default_role = default_role

    @property
    def order(self):
        """
        Gets the order of this Providers.


        :return: The order of this Providers.
        :rtype: float
        """
        return self._order

    @order.setter
    def order(self, order):
        """
        Sets the order of this Providers.


        :param order: The order of this Providers.
        :type: float
        """
        self._order = order

    @property
    def id(self):
        """
        Gets the id of this Providers.


        :return: The id of this Providers.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Providers.


        :param id: The id of this Providers.
        :type: str
        """
        self._id = id

    @property
    def v(self):
        """
        Gets the v of this Providers.


        :return: The v of this Providers.
        :rtype: float
        """
        return self._v

    @v.setter
    def v(self, v):
        """
        Sets the v of this Providers.


        :param v: The v of this Providers.
        :type: float
        """
        self._v = v

    @property
    def id(self):
        """
        Gets the id of this Providers.


        :return: The id of this Providers.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Providers.


        :param id: The id of this Providers.
        :type: str
        """
        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

