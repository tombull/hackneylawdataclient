# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class GenericQuestion(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        GenericQuestion - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'owner_id': 'str',
            'created_at': 'datetime',
            'question_text': 'str',
            'type': 'str',
            'classification': 'Classification',
            'id': 'str',
            'v': 'float',
            'id': 'str',
            'potential_answers': 'list[str]'
        }

        self.attribute_map = {
            'owner_id': '_ownerId',
            'created_at': '_createdAt',
            'question_text': 'questionText',
            'type': 'type',
            'classification': 'classification',
            'id': '_id',
            'v': '__v',
            
            'potential_answers': 'potentialAnswers'
        }

        self._owner_id = None
        self._created_at = None
        self._question_text = None
        self._type = None
        self._classification = None
        self._id = None
        self._v = None
        self._id = None
        self._potential_answers = None

    @property
    def owner_id(self):
        """
        Gets the owner_id of this GenericQuestion.


        :return: The owner_id of this GenericQuestion.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """
        Sets the owner_id of this GenericQuestion.


        :param owner_id: The owner_id of this GenericQuestion.
        :type: str
        """
        self._owner_id = owner_id

    @property
    def created_at(self):
        """
        Gets the created_at of this GenericQuestion.


        :return: The created_at of this GenericQuestion.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this GenericQuestion.


        :param created_at: The created_at of this GenericQuestion.
        :type: datetime
        """
        self._created_at = created_at

    @property
    def question_text(self):
        """
        Gets the question_text of this GenericQuestion.


        :return: The question_text of this GenericQuestion.
        :rtype: str
        """
        return self._question_text

    @question_text.setter
    def question_text(self, question_text):
        """
        Sets the question_text of this GenericQuestion.


        :param question_text: The question_text of this GenericQuestion.
        :type: str
        """
        self._question_text = question_text

    @property
    def type(self):
        """
        Gets the type of this GenericQuestion.


        :return: The type of this GenericQuestion.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this GenericQuestion.


        :param type: The type of this GenericQuestion.
        :type: str
        """
        self._type = type

    @property
    def classification(self):
        """
        Gets the classification of this GenericQuestion.


        :return: The classification of this GenericQuestion.
        :rtype: Classification
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """
        Sets the classification of this GenericQuestion.


        :param classification: The classification of this GenericQuestion.
        :type: Classification
        """
        self._classification = classification

    @property
    def id(self):
        """
        Gets the id of this GenericQuestion.


        :return: The id of this GenericQuestion.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this GenericQuestion.


        :param id: The id of this GenericQuestion.
        :type: str
        """
        self._id = id

    @property
    def v(self):
        """
        Gets the v of this GenericQuestion.


        :return: The v of this GenericQuestion.
        :rtype: float
        """
        return self._v

    @v.setter
    def v(self, v):
        """
        Sets the v of this GenericQuestion.


        :param v: The v of this GenericQuestion.
        :type: float
        """
        self._v = v

    @property
    def id(self):
        """
        Gets the id of this GenericQuestion.


        :return: The id of this GenericQuestion.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this GenericQuestion.


        :param id: The id of this GenericQuestion.
        :type: str
        """
        self._id = id

    @property
    def potential_answers(self):
        """
        Gets the potential_answers of this GenericQuestion.


        :return: The potential_answers of this GenericQuestion.
        :rtype: list[str]
        """
        return self._potential_answers

    @potential_answers.setter
    def potential_answers(self, potential_answers):
        """
        Sets the potential_answers of this GenericQuestion.


        :param potential_answers: The potential_answers of this GenericQuestion.
        :type: list[str]
        """
        self._potential_answers = potential_answers

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

