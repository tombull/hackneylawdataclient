# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Webhooks(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Webhooks - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'enabled': 'bool',
            'resource': 'str',
            'operation': 'str',
            'http_method': 'str',
            'url_template': 'str',
            'parameters': 'list[WebhooksParameters]',
            'content_type': 'str',
            'body_template': 'str',
            'id': 'str',
            'v': 'float',
            'id': 'str'
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'resource': 'resource',
            'operation': 'operation',
            'http_method': 'httpMethod',
            'url_template': 'urlTemplate',
            'parameters': 'parameters',
            'content_type': 'contentType',
            'body_template': 'bodyTemplate',
            'id': '_id',
            'v': '__v'
        }

        self._enabled = None
        self._resource = None
        self._operation = None
        self._http_method = None
        self._url_template = None
        self._parameters = None
        self._content_type = None
        self._body_template = None
        self._id = None
        self._v = None
        self._id = None

    @property
    def enabled(self):
        """
        Gets the enabled of this Webhooks.


        :return: The enabled of this Webhooks.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this Webhooks.


        :param enabled: The enabled of this Webhooks.
        :type: bool
        """
        self._enabled = enabled

    @property
    def resource(self):
        """
        Gets the resource of this Webhooks.


        :return: The resource of this Webhooks.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """
        Sets the resource of this Webhooks.


        :param resource: The resource of this Webhooks.
        :type: str
        """
        self._resource = resource

    @property
    def operation(self):
        """
        Gets the operation of this Webhooks.


        :return: The operation of this Webhooks.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """
        Sets the operation of this Webhooks.


        :param operation: The operation of this Webhooks.
        :type: str
        """
        self._operation = operation

    @property
    def http_method(self):
        """
        Gets the http_method of this Webhooks.


        :return: The http_method of this Webhooks.
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """
        Sets the http_method of this Webhooks.


        :param http_method: The http_method of this Webhooks.
        :type: str
        """
        self._http_method = http_method

    @property
    def url_template(self):
        """
        Gets the url_template of this Webhooks.


        :return: The url_template of this Webhooks.
        :rtype: str
        """
        return self._url_template

    @url_template.setter
    def url_template(self, url_template):
        """
        Sets the url_template of this Webhooks.


        :param url_template: The url_template of this Webhooks.
        :type: str
        """
        self._url_template = url_template

    @property
    def parameters(self):
        """
        Gets the parameters of this Webhooks.


        :return: The parameters of this Webhooks.
        :rtype: list[WebhooksParameters]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this Webhooks.


        :param parameters: The parameters of this Webhooks.
        :type: list[WebhooksParameters]
        """
        self._parameters = parameters

    @property
    def content_type(self):
        """
        Gets the content_type of this Webhooks.


        :return: The content_type of this Webhooks.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """
        Sets the content_type of this Webhooks.


        :param content_type: The content_type of this Webhooks.
        :type: str
        """
        self._content_type = content_type

    @property
    def body_template(self):
        """
        Gets the body_template of this Webhooks.


        :return: The body_template of this Webhooks.
        :rtype: str
        """
        return self._body_template

    @body_template.setter
    def body_template(self, body_template):
        """
        Sets the body_template of this Webhooks.


        :param body_template: The body_template of this Webhooks.
        :type: str
        """
        self._body_template = body_template

    @property
    def id(self):
        """
        Gets the id of this Webhooks.


        :return: The id of this Webhooks.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Webhooks.


        :param id: The id of this Webhooks.
        :type: str
        """
        self._id = id

    @property
    def v(self):
        """
        Gets the v of this Webhooks.


        :return: The v of this Webhooks.
        :rtype: float
        """
        return self._v

    @v.setter
    def v(self, v):
        """
        Sets the v of this Webhooks.


        :param v: The v of this Webhooks.
        :type: float
        """
        self._v = v

    @property
    def id(self):
        """
        Gets the id of this Webhooks.


        :return: The id of this Webhooks.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Webhooks.


        :param id: The id of this Webhooks.
        :type: str
        """
        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

