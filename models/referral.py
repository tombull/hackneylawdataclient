# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Referral(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Referral - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'owner_id': 'str',
            'created_at': 'datetime',
            'referral_time': 'datetime',
            'case_record': 'CaseRecord',
            'lawyer': 'Lawyer',
            'id': 'str',
            'v': 'float',
            'id': 'str'
        }

        self.attribute_map = {
            'owner_id': '_ownerId',
            'created_at': '_createdAt',
            'referral_time': 'referralTime',
            'case_record': 'caseRecord',
            'lawyer': 'lawyer',
            'id': '_id',
            'v': '__v',
            'id': 'id'
        }

        self._owner_id = None
        self._created_at = None
        self._referral_time = None
        self._case_record = None
        self._lawyer = None
        self._id = None
        self._v = None
        self._id = None

    @property
    def owner_id(self):
        """
        Gets the owner_id of this Referral.


        :return: The owner_id of this Referral.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """
        Sets the owner_id of this Referral.


        :param owner_id: The owner_id of this Referral.
        :type: str
        """
        self._owner_id = owner_id

    @property
    def created_at(self):
        """
        Gets the created_at of this Referral.


        :return: The created_at of this Referral.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Referral.


        :param created_at: The created_at of this Referral.
        :type: datetime
        """
        self._created_at = created_at

    @property
    def referral_time(self):
        """
        Gets the referral_time of this Referral.


        :return: The referral_time of this Referral.
        :rtype: datetime
        """
        return self._referral_time

    @referral_time.setter
    def referral_time(self, referral_time):
        """
        Sets the referral_time of this Referral.


        :param referral_time: The referral_time of this Referral.
        :type: datetime
        """
        self._referral_time = referral_time

    @property
    def case_record(self):
        """
        Gets the case_record of this Referral.


        :return: The case_record of this Referral.
        :rtype: CaseRecord
        """
        return self._case_record

    @case_record.setter
    def case_record(self, case_record):
        """
        Sets the case_record of this Referral.


        :param case_record: The case_record of this Referral.
        :type: CaseRecord
        """
        self._case_record = case_record

    @property
    def lawyer(self):
        """
        Gets the lawyer of this Referral.


        :return: The lawyer of this Referral.
        :rtype: Lawyer
        """
        return self._lawyer

    @lawyer.setter
    def lawyer(self, lawyer):
        """
        Sets the lawyer of this Referral.


        :param lawyer: The lawyer of this Referral.
        :type: Lawyer
        """
        self._lawyer = lawyer

    @property
    def id(self):
        """
        Gets the id of this Referral.


        :return: The id of this Referral.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Referral.


        :param id: The id of this Referral.
        :type: str
        """
        self._id = id

    @property
    def v(self):
        """
        Gets the v of this Referral.


        :return: The v of this Referral.
        :rtype: float
        """
        return self._v

    @v.setter
    def v(self, v):
        """
        Sets the v of this Referral.


        :param v: The v of this Referral.
        :type: float
        """
        self._v = v

    @property
    def id(self):
        """
        Gets the id of this Referral.


        :return: The id of this Referral.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Referral.


        :param id: The id of this Referral.
        :type: str
        """
        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

