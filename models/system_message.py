# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class SystemMessage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SystemMessage - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'owner_id': 'str',
            'created_at': 'datetime',
            'message_name': 'str',
            'message': 'str',
            'id': 'str',
            'v': 'float',
            'id': 'str'
        }

        self.attribute_map = {
            'owner_id': '_ownerId',
            'created_at': '_createdAt',
            'message_name': 'messageName',
            'message': 'message',
            'id': '_id',
            'v': '__v'
        }

        self._owner_id = None
        self._created_at = None
        self._message_name = None
        self._message = None
        self._id = None
        self._v = None
        self._id = None

    @property
    def owner_id(self):
        """
        Gets the owner_id of this SystemMessage.


        :return: The owner_id of this SystemMessage.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """
        Sets the owner_id of this SystemMessage.


        :param owner_id: The owner_id of this SystemMessage.
        :type: str
        """
        self._owner_id = owner_id

    @property
    def created_at(self):
        """
        Gets the created_at of this SystemMessage.


        :return: The created_at of this SystemMessage.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this SystemMessage.


        :param created_at: The created_at of this SystemMessage.
        :type: datetime
        """
        self._created_at = created_at

    @property
    def message_name(self):
        """
        Gets the message_name of this SystemMessage.


        :return: The message_name of this SystemMessage.
        :rtype: str
        """
        return self._message_name

    @message_name.setter
    def message_name(self, message_name):
        """
        Sets the message_name of this SystemMessage.


        :param message_name: The message_name of this SystemMessage.
        :type: str
        """
        self._message_name = message_name

    @property
    def message(self):
        """
        Gets the message of this SystemMessage.


        :return: The message of this SystemMessage.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this SystemMessage.


        :param message: The message of this SystemMessage.
        :type: str
        """
        self._message = message

    @property
    def id(self):
        """
        Gets the id of this SystemMessage.


        :return: The id of this SystemMessage.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SystemMessage.


        :param id: The id of this SystemMessage.
        :type: str
        """
        self._id = id

    @property
    def v(self):
        """
        Gets the v of this SystemMessage.


        :return: The v of this SystemMessage.
        :rtype: float
        """
        return self._v

    @v.setter
    def v(self, v):
        """
        Sets the v of this SystemMessage.


        :param v: The v of this SystemMessage.
        :type: float
        """
        self._v = v

    @property
    def id(self):
        """
        Gets the id of this SystemMessage.


        :return: The id of this SystemMessage.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SystemMessage.


        :param id: The id of this SystemMessage.
        :type: str
        """
        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

