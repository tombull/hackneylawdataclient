# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Classification(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Classification - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'owner_id': 'str',
            'created_at': 'datetime',
            'name': 'str',
            'description': 'str',
            'short_description': 'str',
            'initial_advice': 'str',
            'is_active': 'bool',
            'id': 'str',
            'v': 'float',
            'id': 'str',
            'case_record': 'list[str]',
            'questions': 'list[str]',
            'related_information': 'list[str]',
            'required_documents': 'list[str]',
            'lawyers': 'list[str]'
        }

        self.attribute_map = {
            'owner_id': '_ownerId',
            'created_at': '_createdAt',
            'name': 'name',
            'description': 'description',
            'short_description': 'shortDescription',
            'initial_advice': 'initialAdvice',
            'is_active': 'isActive',
            'id': '_id',
            'v': '__v',
            'id': 'id',
            'case_record': 'caseRecord',
            'questions': 'questions',
            'related_information': 'relatedInformation',
            'required_documents': 'requiredDocuments',
            'lawyers': 'lawyers'
        }

        self._owner_id = None
        self._created_at = None
        self._name = None
        self._description = None
        self._short_description = None
        self._initial_advice = None
        self._is_active = None
        self._id = None
        self._v = None
        self._id = None
        self._case_record = None
        self._questions = None
        self._related_information = None
        self._required_documents = None
        self._lawyers = None

    @property
    def owner_id(self):
        """
        Gets the owner_id of this Classification.


        :return: The owner_id of this Classification.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """
        Sets the owner_id of this Classification.


        :param owner_id: The owner_id of this Classification.
        :type: str
        """
        self._owner_id = owner_id

    @property
    def created_at(self):
        """
        Gets the created_at of this Classification.


        :return: The created_at of this Classification.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Classification.


        :param created_at: The created_at of this Classification.
        :type: datetime
        """
        self._created_at = created_at

    @property
    def name(self):
        """
        Gets the name of this Classification.


        :return: The name of this Classification.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Classification.


        :param name: The name of this Classification.
        :type: str
        """
        self._name = name

    @property
    def description(self):
        """
        Gets the description of this Classification.


        :return: The description of this Classification.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Classification.


        :param description: The description of this Classification.
        :type: str
        """
        self._description = description

    @property
    def short_description(self):
        """
        Gets the short_description of this Classification.


        :return: The short_description of this Classification.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """
        Sets the short_description of this Classification.


        :param short_description: The short_description of this Classification.
        :type: str
        """
        self._short_description = short_description

    @property
    def initial_advice(self):
        """
        Gets the initial_advice of this Classification.


        :return: The initial_advice of this Classification.
        :rtype: str
        """
        return self._initial_advice

    @initial_advice.setter
    def initial_advice(self, initial_advice):
        """
        Sets the initial_advice of this Classification.


        :param initial_advice: The initial_advice of this Classification.
        :type: str
        """
        self._initial_advice = initial_advice

    @property
    def is_active(self):
        """
        Gets the is_active of this Classification.


        :return: The is_active of this Classification.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """
        Sets the is_active of this Classification.


        :param is_active: The is_active of this Classification.
        :type: bool
        """
        self._is_active = is_active

    @property
    def id(self):
        """
        Gets the id of this Classification.


        :return: The id of this Classification.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Classification.


        :param id: The id of this Classification.
        :type: str
        """
        self._id = id

    @property
    def v(self):
        """
        Gets the v of this Classification.


        :return: The v of this Classification.
        :rtype: float
        """
        return self._v

    @v.setter
    def v(self, v):
        """
        Sets the v of this Classification.


        :param v: The v of this Classification.
        :type: float
        """
        self._v = v

    @property
    def id(self):
        """
        Gets the id of this Classification.


        :return: The id of this Classification.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Classification.


        :param id: The id of this Classification.
        :type: str
        """
        self._id = id

    @property
    def case_record(self):
        """
        Gets the case_record of this Classification.


        :return: The case_record of this Classification.
        :rtype: list[str]
        """
        return self._case_record

    @case_record.setter
    def case_record(self, case_record):
        """
        Sets the case_record of this Classification.


        :param case_record: The case_record of this Classification.
        :type: list[str]
        """
        self._case_record = case_record

    @property
    def questions(self):
        """
        Gets the questions of this Classification.


        :return: The questions of this Classification.
        :rtype: list[str]
        """
        return self._questions

    @questions.setter
    def questions(self, questions):
        """
        Sets the questions of this Classification.


        :param questions: The questions of this Classification.
        :type: list[str]
        """
        self._questions = questions

    @property
    def related_information(self):
        """
        Gets the related_information of this Classification.


        :return: The related_information of this Classification.
        :rtype: list[str]
        """
        return self._related_information

    @related_information.setter
    def related_information(self, related_information):
        """
        Sets the related_information of this Classification.


        :param related_information: The related_information of this Classification.
        :type: list[str]
        """
        self._related_information = related_information

    @property
    def required_documents(self):
        """
        Gets the required_documents of this Classification.


        :return: The required_documents of this Classification.
        :rtype: list[str]
        """
        return self._required_documents

    @required_documents.setter
    def required_documents(self, required_documents):
        """
        Sets the required_documents of this Classification.


        :param required_documents: The required_documents of this Classification.
        :type: list[str]
        """
        self._required_documents = required_documents

    @property
    def lawyers(self):
        """
        Gets the lawyers of this Classification.


        :return: The lawyers of this Classification.
        :rtype: list[str]
        """
        return self._lawyers

    @lawyers.setter
    def lawyers(self, lawyers):
        """
        Sets the lawyers of this Classification.


        :param lawyers: The lawyers of this Classification.
        :type: list[str]
        """
        self._lawyers = lawyers

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

