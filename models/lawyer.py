# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Lawyer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Lawyer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'owner_id': 'str',
            'created_at': 'datetime',
            'name': 'str',
            'email_address': 'str',
            'trello_id': 'str',
            'id': 'str',
            'v': 'float',
            'id': 'str',
            'referrals': 'list[str]',
            'specialisms': 'list[str]'
        }

        self.attribute_map = {
            'owner_id': '_ownerId',
            'created_at': '_createdAt',
            'name': 'name',
            'email_address': 'emailAddress',
            'trello_id': 'trelloId',
            'id': '_id',
            'v': '__v',
            
            'referrals': 'referrals',
            'specialisms': 'specialisms'
        }

        self._owner_id = None
        self._created_at = None
        self._name = None
        self._email_address = None
        self._trello_id = None
        self._id = None
        self._v = None
        self._id = None
        self._referrals = None
        self._specialisms = None

    @property
    def owner_id(self):
        """
        Gets the owner_id of this Lawyer.


        :return: The owner_id of this Lawyer.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """
        Sets the owner_id of this Lawyer.


        :param owner_id: The owner_id of this Lawyer.
        :type: str
        """
        self._owner_id = owner_id

    @property
    def created_at(self):
        """
        Gets the created_at of this Lawyer.


        :return: The created_at of this Lawyer.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Lawyer.


        :param created_at: The created_at of this Lawyer.
        :type: datetime
        """
        self._created_at = created_at

    @property
    def name(self):
        """
        Gets the name of this Lawyer.


        :return: The name of this Lawyer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Lawyer.


        :param name: The name of this Lawyer.
        :type: str
        """
        self._name = name

    @property
    def email_address(self):
        """
        Gets the email_address of this Lawyer.


        :return: The email_address of this Lawyer.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """
        Sets the email_address of this Lawyer.


        :param email_address: The email_address of this Lawyer.
        :type: str
        """
        self._email_address = email_address

    @property
    def trello_id(self):
        """
        Gets the trello_id of this Lawyer.


        :return: The trello_id of this Lawyer.
        :rtype: str
        """
        return self._trello_id

    @trello_id.setter
    def trello_id(self, trello_id):
        """
        Sets the trello_id of this Lawyer.


        :param trello_id: The trello_id of this Lawyer.
        :type: str
        """
        self._trello_id = trello_id

    @property
    def id(self):
        """
        Gets the id of this Lawyer.


        :return: The id of this Lawyer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Lawyer.


        :param id: The id of this Lawyer.
        :type: str
        """
        self._id = id

    @property
    def v(self):
        """
        Gets the v of this Lawyer.


        :return: The v of this Lawyer.
        :rtype: float
        """
        return self._v

    @v.setter
    def v(self, v):
        """
        Sets the v of this Lawyer.


        :param v: The v of this Lawyer.
        :type: float
        """
        self._v = v

    @property
    def id(self):
        """
        Gets the id of this Lawyer.


        :return: The id of this Lawyer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Lawyer.


        :param id: The id of this Lawyer.
        :type: str
        """
        self._id = id

    @property
    def referrals(self):
        """
        Gets the referrals of this Lawyer.


        :return: The referrals of this Lawyer.
        :rtype: list[str]
        """
        return self._referrals

    @referrals.setter
    def referrals(self, referrals):
        """
        Sets the referrals of this Lawyer.


        :param referrals: The referrals of this Lawyer.
        :type: list[str]
        """
        self._referrals = referrals

    @property
    def specialisms(self):
        """
        Gets the specialisms of this Lawyer.


        :return: The specialisms of this Lawyer.
        :rtype: list[str]
        """
        return self._specialisms

    @specialisms.setter
    def specialisms(self, specialisms):
        """
        Sets the specialisms of this Lawyer.


        :param specialisms: The specialisms of this Lawyer.
        :type: list[str]
        """
        self._specialisms = specialisms

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

