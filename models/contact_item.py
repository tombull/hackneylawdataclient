# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ContactItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ContactItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'owner_id': 'str',
            'created_at': 'datetime',
            'contact_time': 'datetime',
            'direction': 'bool',
            'message_english': 'str',
            'language': 'str',
            'message_original': 'str',
            'case_record': 'CaseRecord',
            'id': 'str',
            'v': 'float',
            'id': 'str'
        }

        self.attribute_map = {
            'owner_id': '_ownerId',
            'created_at': '_createdAt',
            'contact_time': 'contactTime',
            'direction': 'direction',
            'message_english': 'messageEnglish',
            'language': 'language',
            'message_original': 'messageOriginal',
            'case_record': 'caseRecord',
            'id': '_id',
            'v': '__v'
        }

        self._owner_id = None
        self._created_at = None
        self._contact_time = None
        self._direction = None
        self._message_english = None
        self._language = None
        self._message_original = None
        self._case_record = None
        self._id = None
        self._v = None
        self._id = None

    @property
    def owner_id(self):
        """
        Gets the owner_id of this ContactItem.


        :return: The owner_id of this ContactItem.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """
        Sets the owner_id of this ContactItem.


        :param owner_id: The owner_id of this ContactItem.
        :type: str
        """
        self._owner_id = owner_id

    @property
    def created_at(self):
        """
        Gets the created_at of this ContactItem.


        :return: The created_at of this ContactItem.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this ContactItem.


        :param created_at: The created_at of this ContactItem.
        :type: datetime
        """
        self._created_at = created_at

    @property
    def contact_time(self):
        """
        Gets the contact_time of this ContactItem.


        :return: The contact_time of this ContactItem.
        :rtype: datetime
        """
        return self._contact_time

    @contact_time.setter
    def contact_time(self, contact_time):
        """
        Sets the contact_time of this ContactItem.


        :param contact_time: The contact_time of this ContactItem.
        :type: datetime
        """
        self._contact_time = contact_time

    @property
    def direction(self):
        """
        Gets the direction of this ContactItem.


        :return: The direction of this ContactItem.
        :rtype: bool
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """
        Sets the direction of this ContactItem.


        :param direction: The direction of this ContactItem.
        :type: bool
        """
        self._direction = direction

    @property
    def message_english(self):
        """
        Gets the message_english of this ContactItem.


        :return: The message_english of this ContactItem.
        :rtype: str
        """
        return self._message_english

    @message_english.setter
    def message_english(self, message_english):
        """
        Sets the message_english of this ContactItem.


        :param message_english: The message_english of this ContactItem.
        :type: str
        """
        self._message_english = message_english

    @property
    def language(self):
        """
        Gets the language of this ContactItem.


        :return: The language of this ContactItem.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """
        Sets the language of this ContactItem.


        :param language: The language of this ContactItem.
        :type: str
        """
        self._language = language

    @property
    def message_original(self):
        """
        Gets the message_original of this ContactItem.


        :return: The message_original of this ContactItem.
        :rtype: str
        """
        return self._message_original

    @message_original.setter
    def message_original(self, message_original):
        """
        Sets the message_original of this ContactItem.


        :param message_original: The message_original of this ContactItem.
        :type: str
        """
        self._message_original = message_original

    @property
    def case_record(self):
        """
        Gets the case_record of this ContactItem.


        :return: The case_record of this ContactItem.
        :rtype: CaseRecord
        """
        return self._case_record

    @case_record.setter
    def case_record(self, case_record):
        """
        Sets the case_record of this ContactItem.


        :param case_record: The case_record of this ContactItem.
        :type: CaseRecord
        """
        self._case_record = case_record

    @property
    def id(self):
        """
        Gets the id of this ContactItem.


        :return: The id of this ContactItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ContactItem.


        :param id: The id of this ContactItem.
        :type: str
        """
        self._id = id

    @property
    def v(self):
        """
        Gets the v of this ContactItem.


        :return: The v of this ContactItem.
        :rtype: float
        """
        return self._v

    @v.setter
    def v(self, v):
        """
        Sets the v of this ContactItem.


        :param v: The v of this ContactItem.
        :type: float
        """
        self._v = v

    @property
    def id(self):
        """
        Gets the id of this ContactItem.


        :return: The id of this ContactItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ContactItem.


        :param id: The id of this ContactItem.
        :type: str
        """
        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

