# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Users(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Users - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'account_type': 'str',
            'username': 'str',
            'password': 'str',
            'token': 'str',
            'created_at': 'datetime',
            'last_access_on': 'datetime',
            'enabled': 'bool',
            'role': 'str',
            'description': 'str',
            'id': 'str',
            'v': 'float',
            'id': 'str'
        }

        self.attribute_map = {
            'account_type': 'accountType',
            'username': 'username',
            'password': 'password',
            'token': 'token',
            'created_at': 'createdAt',
            'last_access_on': 'lastAccessOn',
            'enabled': 'enabled',
            'role': 'role',
            'description': 'description',
            'id': '_id',
            'v': '__v',
            'id': 'id'
        }

        self._account_type = None
        self._username = None
        self._password = None
        self._token = None
        self._created_at = None
        self._last_access_on = None
        self._enabled = None
        self._role = None
        self._description = None
        self._id = None
        self._v = None
        self._id = None

    @property
    def account_type(self):
        """
        Gets the account_type of this Users.


        :return: The account_type of this Users.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """
        Sets the account_type of this Users.


        :param account_type: The account_type of this Users.
        :type: str
        """
        self._account_type = account_type

    @property
    def username(self):
        """
        Gets the username of this Users.


        :return: The username of this Users.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this Users.


        :param username: The username of this Users.
        :type: str
        """
        self._username = username

    @property
    def password(self):
        """
        Gets the password of this Users.


        :return: The password of this Users.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this Users.


        :param password: The password of this Users.
        :type: str
        """
        self._password = password

    @property
    def token(self):
        """
        Gets the token of this Users.


        :return: The token of this Users.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """
        Sets the token of this Users.


        :param token: The token of this Users.
        :type: str
        """
        self._token = token

    @property
    def created_at(self):
        """
        Gets the created_at of this Users.


        :return: The created_at of this Users.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Users.


        :param created_at: The created_at of this Users.
        :type: datetime
        """
        self._created_at = created_at

    @property
    def last_access_on(self):
        """
        Gets the last_access_on of this Users.


        :return: The last_access_on of this Users.
        :rtype: datetime
        """
        return self._last_access_on

    @last_access_on.setter
    def last_access_on(self, last_access_on):
        """
        Sets the last_access_on of this Users.


        :param last_access_on: The last_access_on of this Users.
        :type: datetime
        """
        self._last_access_on = last_access_on

    @property
    def enabled(self):
        """
        Gets the enabled of this Users.


        :return: The enabled of this Users.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this Users.


        :param enabled: The enabled of this Users.
        :type: bool
        """
        self._enabled = enabled

    @property
    def role(self):
        """
        Gets the role of this Users.


        :return: The role of this Users.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """
        Sets the role of this Users.


        :param role: The role of this Users.
        :type: str
        """
        self._role = role

    @property
    def description(self):
        """
        Gets the description of this Users.


        :return: The description of this Users.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Users.


        :param description: The description of this Users.
        :type: str
        """
        self._description = description

    @property
    def id(self):
        """
        Gets the id of this Users.


        :return: The id of this Users.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Users.


        :param id: The id of this Users.
        :type: str
        """
        self._id = id

    @property
    def v(self):
        """
        Gets the v of this Users.


        :return: The v of this Users.
        :rtype: float
        """
        return self._v

    @v.setter
    def v(self, v):
        """
        Sets the v of this Users.


        :param v: The v of this Users.
        :type: float
        """
        self._v = v

    @property
    def id(self):
        """
        Gets the id of this Users.


        :return: The id of this Users.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Users.


        :param id: The id of this Users.
        :type: str
        """
        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

